"""
Задание №1

Создайте функцию, которая принимает в качестве параметра - натуральное целое число.
Данная функция находит факториал полученного числа
Например, факториал числа 3 это число 6.

Теперь создайте список факториалов чисел от получившегося ранее факториала 6, до 1.
В итоге, на вход программа получает например число 3,
возвращает число 6 (факториал числа 3) и вам нужно сделать
список из факториалов числа 6 в убывающем порядке. Находим факториал
числа 6 - это 720, затем от числа 5 - это 120 и так далее вплоть до 1

То есть, результирующий список будет выглядеть в нашем примере так:

[720, 120, 24, 6, 2, 1]

Задание №2
"""

# def factorial(num: int) -> int:
#     con = 0
#     for i in range(num - 1, 1, -1):
#         con = num * i
#         num = con
#     return list_factorial(con)
#
#
# def list_factorial(num: int) -> list:
#     my_list = [i for i in range(num, 0, -1)]
#     con = 0
#     factor = []
#     for i in my_list:
#         num = i
#         for j in range(i - 1, 1, -1):
#             con = num * j
#             num = con
#         factor.append(num)
#     return f'{factor}'
#
#
# print(factorial(int(input("Введите число: "))))


"""
Задание №2

В Урок №10. Задание №1 вы создавали словарь с информацией о питомце.
Теперь нам нужна "настоящая" база данных для ветеринарной клиники.

Подробный требуемый функционал будет ниже. Пока что справка:

Создайте функцию create
Создайте функцию read
Создайте функцию update
Создайте функцию delete
Используйте словарь pets, который будет предоставлен ниже, либо создайте свой аналогичный
Функция create:

Данная функция будет создавать новую запись с информацией
о питомце и добавлять эту информацию в наш словарь pets

Функция read

Данная функция будет отображать информацию о запрашиваемом питомце в виде:

Это желторотый питон по кличке "Каа". Возраст питомца: 19 лет. Имя владельца: Саша

Функция update

Данная функция будет обновлять информацию об указанном питомце

Функция delete

Данная функция будет удалять запись о существующем питомце

Структруа результирующего словаря pets будет как и в Урок №10. Задание №1,
но с небольшим видоизменением:

Словарь pets

pets = {

    1:

        {

            "Мухтар": {

                "Вид питомца": "Собака",

                "Возраст питомца": 9,

                "Имя владельца": "Павел"

            },

        },

    2:

        {

            "Каа": {

                "Вид питомца": "желторотый питон",

                "Возраст питомца": 19,

                "Имя владельца": "Саша"

            },

        },

    # и так далее

}

Здесь, 1 и 2 - это идентификаторы наших питомцев. Это уникальные ключи,
по которым мы сможем обращаться к нашим записям в "базе данных"

Суть будущей программы будет заключаться в следующем:

Программа будет работать с помощью цикла while с условием command != 'stop',
то есть до тех пор, пока на предложение ввести команду, пользователь не введёт слово stop
Перед взаимодействием с "базой данных" запрашивается одна из команд в качестве
пользовательского ввода. Пусть это будет переменная command
Функция create должна добавлять новую информацию таким образом,
чтобы идентификатор увеличивался на единицу. Чтобы у вас была возможность
получать последний ключ в словаре воспользуйтесь импортом модуля collections.
В начале вашей программы пропишите строчку: import collection, а в функции create
в первых строках пропишите следующий код:

def create():
last = collections.deque(pets, maxlen=1)[0]
last в данном случае и будет число последнего ключа (или в нашей логике - идентификатора записи).
Именно его и необходимо будет увеличивать на единицу при добавлении следующей записи.
Как вам уже известно - суть функций заключается в том, чтобы использовать один и тот же
код в нескольких местах. В данной задаче вам предстоит получать информацию о питомце несколько раз.
Чтобы не повторяться в коде, вам нужно создать такие функции

get_pet(ID):

def get_pet(ID):

  # функция, с помощью которой вы получите информацию о питомце в виде словаря

  # сделайте проверку, если питомца с таким ID нету в нашей "базе данных"

  # верните в этом случае False

  # а если питомец всё же есть в "базе данных" - верните информацию о нём

  # выглядеть это может примерно так:

  return pets[ID] if ID in pets.keys() else False

get_suffix(age):

def get_suffix(age):

  # функция, с помощью которой можно получить суффикс

  # 'год', 'года', 'лет'

  # реализацию этой функции вам предстоит придумать самостоятельно

  # функция будет возвращать соответствующую строку

  return

pets_list():

def pets_list():

  # Эта функция будет создана для удобства отображения всего списка питомцев

  # Информацию по каждому питомцу можно вывести с помощью цикла for

Обратите внимание, если ID не существует в словаре с питомцами - будет возникать ошибка.
Вам можно от неё избавиться, если правильно составить проверочное условие.
Здесь не потребуется использовать такие конструкции, как try, except,
чтобы обработать возникшую ошибку
"""

# pets = {}
#
#
# def create() -> None:
#     if [*pets.keys()]:
#         pets[[*pets.keys()][-1] + 1] = {input('Кличка питомца: '): {"Вид питомца": input('Вид питомца: '),
#
#                                                                     "Возраст питомца": input('Возраст питомца: '),
#
#                                                                     "Имя владельца": input('Имя владельца: ')}}
#     else:
#         pets[1] = {input('Кличка питомца: '): {"Вид питомца": input('Вид питомца: '),
#
#                                                "Возраст питомца": input('Возраст питомца: '),
#
#                                                "Имя владельца": input('Имя владельца: ')}}
#
#
# def read() -> str:
#     if [*pets.keys()]:
#         print([[k, v] for k, v in pets.items()])
#         num = int(input('Введите номер питомца: '))
#         if num in [*pets.keys()]:
#             for k, v in pets.items():
#                 for ke, va in v.items():
#                     if k == num:
#                         print(f'Это {va['Вид питомца']} по кличке "{ke}". '
#                               f'Возраст питомца: {va["Возраст питомца"]} {get_suffix(va["Возраст питомца"])}. '
#                               f'Имя владельца: {va["Имя владельца"]}')
#         else:
#             print(f'С ID {num} запись не найдена.')
#     else:
#         print('У вас нет ни одной записи, попробуйте команду - 1')
#
#
# def update() -> dict:
#     if [*pets.keys()]:
#         num = int(input('Введите номер питомца для редактирования: '))
#         if num in [*pets.keys()]:
#             print(pets[num])
#             pets[num] = {input('Кличка питомца: '): {"Вид питомца": input('Вид питомца: '),
#
#                                                      "Возраст питомца": input('Возраст питомца: '),
#
#                                                      "Имя владельца": input('Имя владельца: ')}}
#             print(pets[num])
#         else:
#             print(f'С ID {num} запись не найдена.')
#     else:
#         print('У вас нет ни одной записи, попробуйте команду - 1')
#
#
# def delete() -> (str, dict):
#     num = int(input('Введите номер записи для удаления: '))
#     if num in [*pets.keys()]:
#         print(f'Удалили запись под номером {num}: {pets.pop(num)}')
#     else:
#         print('Такой записи нет!')
#
#
# def get_pet(ID: int) -> (bool, dict):
#     if ID in [*pets.keys()]:
#         return pets[ID]
#     else:
#         return False
#
#
# def get_suffix(age) -> str:
#     if int(age) != 11 and int(age) % 10 == 1:
#         return 'год'
#     elif int(age) % 10 in [2, 3, 4] and not (int(age) % 100 in [12, 13, 14]):
#         return 'года'
#     else:
#         return 'лет'
#
#
# def pets_list() -> str:
#     if [*pets.keys()]:
#         for k, v in pets.items():
#             for ke, va in v.items():
#                 print(f'ID {k}: Это {va['Вид питомца']} по кличке "{ke}". '
#                       f'Возраст питомца: {va["Возраст питомца"]} {get_suffix(va["Возраст питомца"])}. '
#                       f'Имя владельца: {va["Имя владельца"]}')
#     else:
#         print('Список пуст, попробуйте добавить запись "Команда - 1"')
#
#
# while True:
#     print('Команды:\nЧтобы добавить запись: 1\n'
#           'Вывести запись на экран: 2\n'
#           'Обновить информацию: 3\n'
#           'Удалить запись: 4\n'
#           'Проверка по ID: 5\n'
#           'Вывести все записи: 6\n'
#           'Остановить: Stop')
#     command = input('Введите команду: ').lower()
#     if command == '1':
#         create()
#     elif command == '2':
#         read()
#     elif command == '3':
#         update()
#     elif command == '4':
#         delete()
#     elif command == '5':
#         print(get_pet(int(input('Введи ID питомца: '))))
#     elif command == '6':
#         pets_list()
#     elif command == 'stop':
#         break
#     else:
#         print('Нет такой команды!')
